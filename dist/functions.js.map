{"version":3,"file":"functions.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECQpB,SAASC,EAAIC,EAAOC,GACzB,OAAOD,EAAQC,CACjB,CCVAH,EAAoBI,EAAI,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDP,EAAoBQ,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GFoHlFI,gBAAgBC,UAAU,MAAOlB,GACjCiB,gBAAgBC,UAAU,SAjGnB,SAAejB,EAAOC,GAC3B,OAAOD,EAAQC,CACjB,IAgGAe,gBAAgBC,UAAU,OAvFnB,SAAajB,EAAOC,GACzB,OAAOD,EAAQC,CACjB,IAsFAe,gBAAgBC,UAAU,SA/EnB,SAAeC,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAuEAH,gBAAgBC,UAAU,aAvDnB,SAAmBU,EAAaT,GACrC,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA8CAH,gBAAgBC,UAAU,OAtCnB,SAAoBY,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAmCAb,gBAAgBC,UAAU,QA1BnB,SAAcjB,EAAOC,GAC1B,OAAOD,EAAQC,CACjB,IAyBAe,gBAAgBC,UAAU,UAjBnB,SAAgBe,GAOrB,OALK,WAAeA,GAAOA,GAAM,SACXjC,EAAIiC,EAAG,GAEPC,OAAOC,GAG/B,G","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/functions/functions.js","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* global clearInterval, console, setInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Multiply two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The multiply of the two numbers.\n */\nexport function multi(first, second) {\n  return first * second;\n}\n\n/**\n * Divide two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The divide of the two numbers.\n */\nexport function div(first, second) {\n  return first / second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nexport function logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Divide2 two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The divide of the two numbers.\n */\nexport function div2(first, second) {\n  return first / second;\n}\n\n/**\n * Steam FunctionTsatP()\n * @customfunction\n * @param {number} p First number\n * @returns {number} The saturated Pressure.\n */\nexport function Tsat_p(p) {\n  let fn_return_value;\n  if ((0.000611657 <= p) && (p <= (22.06395 + 0.001))) {\n      fn_return_value = add(p, 3);\n  } else {\n      fn_return_value = Number.NaN;\n  }\n  return fn_return_value;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"MULTI\", multi);\nCustomFunctions.associate(\"DIV\", div);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"DIV2\", div2);\nCustomFunctions.associate(\"TSAT_P\", Tsat_p);","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["__webpack_require__","add","first","second","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","CustomFunctions","associate","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","p","Number","NaN"],"sourceRoot":""}